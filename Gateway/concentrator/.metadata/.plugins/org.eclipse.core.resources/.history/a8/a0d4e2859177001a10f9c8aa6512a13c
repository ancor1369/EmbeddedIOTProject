//#include <iostream>
//#include <fstream>

#include <cpprest/http_client.h>
#include <cpprest/filestream.h>
//#include <cpprest/ppltasks.h>

using namespace std;
using namespace utility;                    // Common utilities like string conversions
using namespace web;                        // Common features like URIs.
using namespace web::http;                  // Common HTTP functionality
using namespace web::http::client;          // HTTP client features
using namespace concurrency::streams;       // Asynchronous streams

int main()
{
//
//	pplx::task<json::value> requestTask = pplx::create_task([]{
//			http_client client(U("http://localhost:7000/"));
//			// Build request URI and start the request.
//			uri_builder builder(U("/product/50"));
//			return client.request(methods::GET, builder.to_string());
//	}).then([](http_response response){
//		if(response.status_code() == status_codes::OK)
//		{
//		  return response.extract_json();
//		}
//		return pplx::create_task([] { return json::value(); });
//	}).then([] (json::value result){
//		return result;
//	});



//	  return pplx::create_task([]
//	  {
//	    http_client client(L"http://localhost:5540/api/values");
//
//	    return client.request(methods::GET);
//	  }).then([](http_response response)
//	  {
//	    if(response.status_code() == status_codes::OK)
//	    {
//	      return response.extract_json();
//	    }
//
//	    return pplx::create_task([] { return json::value(); });
//
//	  }).then([](json::value jsonValue)
//	  {
//	    if(jsonValue.is_null())
//	      return;
//
//	    MemberGenerator generator;
//	    for(auto iterArray = jsonValue.cbegin(); iterArray != jsonValue.cend(); ++iterArray)
//	    {
//	      const json::value &arrayValue = iterArray->second;
//
//	      auto member = generator.GetMemberFromJson(arrayValue);
//	      member.Display();
//	    }
//	  });





		auto fileStream = std::make_shared<ostream>();

		// Open stream to output file.
		pplx::task<void> requestTask = fstream::open_ostream(U("results.html")).then([=](ostream outFile)
		{
			*fileStream = outFile;

			// Create http_client to send the request.
			http_client client(U("http://localhost:7000/"));
			// Build request URI and start the request.
			uri_builder builder(U("/product/50"));
			return client.request(methods::GET, builder.to_string());
		})

		// Handle response headers arriving.
		.then([=](http_response response)
		{
			printf("Received response status code:%u\n", response.status_code());

			// Write response body into the file.
			return response.body().read_to_end(fileStream->streambuf());

		})

	    // Close the file stream.
	    .then([=](size_t)
	    {
	        return fileStream->close();
	    });
//	     Wait for all the outstanding I/O to complete and handle any exceptions
	    try
	    {
	        requestTask.wait();
	    }
	    catch (const std::exception &e)
	    {
	        printf("Error exception:%s\n", e.what());
	    }



//
		ofstream outline;
		outline.open("results.html");


	    return 0;
}
