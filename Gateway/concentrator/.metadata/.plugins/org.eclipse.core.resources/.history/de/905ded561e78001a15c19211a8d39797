//#include <iostream>
//#include <fstream>

#include <cpprest/http_client.h>
#include <cpprest/filestream.h>
//#include <cpprest/ppltasks.h>

//using namespace std;
using namespace utility;                    // Common utilities like string conversions
using namespace web;                        // Common features like URIs.
using namespace web::http;                  // Common HTTP functionality
using namespace web::http::client;          // HTTP client features
using namespace concurrency::streams;       // Asynchronous streams






int main()
{


	pplx::create_task([]
	{
	    http_client client(U("http://localhost:7000/"));
	    uri_builder builder(U("/product/50"));
	    return client.request(methods::GET,builder.to_string());
	}).then([](http_response response)
	{
	    if (response.status_code() == status_codes::OK)
	    {
	        auto body = response.extract_string();
	        std::wcout << L"Added new Id: " << body.get().c_str() << std::endl;

	        return std::stoi(body.get().c_str());
	    }

	});




//	pplx::task<json::value> requestTask = pplx::create_task([]{
//			http_client client(U("http://localhost:7000/"));
//			// Build request URI and start the request.
//			uri_builder builder(U("/product/50"));
//			return client.request(methods::GET, builder.to_string());
//	}).then([](http_response response){
//		if(response.status_code() == status_codes::OK)
//		{
//		  return response.extract_json();
//		}
//		return pplx::create_task([] { return json::value(); });
//	}).then([] (json::value result){
//		return result;
//	});



//		auto fileStream = std::make_shared<ostream>();
//
//		// Open stream to output file.
//		pplx::task<void> requestTask = fstream::open_ostream(U("results.html")).then([=](ostream outFile)
//		{
//			*fileStream = outFile;
//
//			// Create http_client to send the request.
//			http_client client(U("http://localhost:7000/"));
//			// Build request URI and start the request.
//			uri_builder builder(U("/product/50"));
//			return client.request(methods::GET, builder.to_string());
//		})
//
//		// Handle response headers arriving.
//		.then([=](http_response response)
//		{
//			printf("Received response status code:%u\n", response.status_code());
//
//			// Write response body into the file.
//			return response.body().read_to_end(fileStream->streambuf());
//
//		})
//
//	    // Close the file stream.
//	    .then([=](size_t)
//	    {
//	        return fileStream->close();
//	    });
////	     Wait for all the outstanding I/O to complete and handle any exceptions
//	    try
//	    {
//	        requestTask.wait();
//	    }
//	    catch (const std::exception &e)
//	    {
//	        printf("Error exception:%s\n", e.what());
//	    }
//
//
//
//	    char line[512];
//	    std::ifstream infile;
//	    infile.open("results.html");
//	    if(infile.is_open())
//	    {
//	    	infile.getline(line,512);
//	    	for(uint i = 0;i<sizeof(line);i++)
//	    	{
//	    		std::cout << line[i];
//	    	}
//
//	    	infile.close();
//	    }

	    return 0;
}
